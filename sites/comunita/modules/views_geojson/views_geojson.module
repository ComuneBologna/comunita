<?php

/**
 * @file
 * Provide a GeoJSON Views feed style.
 */

/**
 * Implements hook_views_api().
 */
function views_geojson_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'views_geojson') . '/views',
  );
}

/**
 * Takes each field from a row object and renders the field as determined by the field's theme.
 *
 * @param $view
 *    View the row belongs to
 * @param $row
 *   Row object
 * @return array
 *   Object containing all the raw and rendered fields
 */
function _views_geojson_render_fields($view, $row, $index) {
  $excluded_fields = array();
  $feature         = array('type' => 'Feature');
  $data_source     = $view->style_plugin->options['data_source'];
  $field_ids       = array_keys($view->field);

  // Pre-render fields to handle those rewritten with tokens
  foreach ($view->field as $field_idx => $field) {
    $field->advanced_render($row);
  }

  switch ($data_source['value']) {
    case 'latlon':
      $options   = array('latitude', 'longitude');
      $latitude = NULL;
      $longitude = NULL;
      foreach ($view->field as $field_idx => $field) {
        foreach ($options as $option) {
          if ($data_source[$option] == $field_idx) {
            $$option           = $field->advanced_render($row);
            $excluded_fields[] = $field_idx;
          }
        }
      }
      if (!empty($latitude) && !empty($longitude)) {
        $feature['geometry'] = array(
          'type'        => 'Point',
          'coordinates' => array(floatval($longitude), floatval($latitude)));
      }
      break;

    case 'geofield':
      foreach ($view->field as $field_idx => $field) {
        if ($data_source['geofield'] == $field_idx) {
          $geofield = $view->style_plugin->get_field_value($view->row_index, $field_idx);
          $geofield = (isset($geofield[0]['wkt'])) ? $geofield[0]['wkt'] : $geofield[0]['geom'];
          $view->row_index = $index;
          $excluded_fields[] = $field_idx;
        }
      }
      if (!empty($geofield)) {
        geophp_load();
        $json = geoPHP::load($geofield);
        if (is_object($json)) {
          $feature['geometry'] = json_decode($json->out('json'));
        }
      }
      break;

    case 'wkt':
      foreach ($view->field as $field_idx => $field) {
        if ($data_source['wkt'] == $field_idx) {
          $wkt = $field->advanced_render($row);
          $excluded_fields[] = $field_idx;
        }
      }
      if (!empty($wkt)) {
        geophp_load();
        $json = geoPHP::load($wkt, 'wkt');
        if (is_object($json)) {
          $feature['geometry'] = json_decode($json->out('json'));
        }
      }
      break;
  }

  // Only add features with geometry data
  if (empty($feature['geometry'])) {
    return;
  }

  // Add the name and description attributes
  // as chosen through interface
  if ($data_source['name_field']) {
    foreach ($view->field as $field_idx => $field) {
      if ($data_source['name_field'] == $field_idx) {
        $name_field = $field->advanced_render($row);
        $excluded_fields[] = $field_idx;
      }
    }
    $feature['properties']['name'] = $name_field;
  }
  else {
    $feature['properties']['name'] = '';
  }

  if ($data_source['description_field']) {
    foreach ($view->field as $field_idx => $field) {
      if ($data_source['description_field'] == $field_idx) {
        $description_field = $field->advanced_render($row);
        $excluded_fields[] = $field_idx;
      }
    }
    $feature['properties']['description'] = $description_field;
  }
  else {
    $feature['properties']['description'] = '';
  }

  // Fill in attributes that are not:
  // - Coordinate fields
  // - Name/description (already processed)
  // - Views "excluded" fields
  foreach ($field_ids as $id) {
    $field = $view->field[$id];
    if (!in_array($id, $excluded_fields, TRUE) && !($field->options['exclude'])) {
      // Allows you to customize the name of the property by setting a label to the field.
      $key = empty($field->options['label']) ? $id : $field->options['label'];
      $value_rendered = $field->advanced_render($row);
      $feature['properties'][$key] = is_numeric($value_rendered) ? floatval($value_rendered) : $value_rendered;
    }
  }

  return $feature;
}

/**
 * Encodes GeoJSON in a pretty-printed fashion.
 */
function _views_geojson_encode_formatted($json) {
  // Credits: https://github.com/GerHobbelt/nicejson-php
  if (!is_string($json)) {
    if (phpversion() && phpversion() >= 5.4) {
      return json_encode($json, JSON_PRETTY_PRINT);
    }
    $json = json_encode($json);
  }
  $result      = '';
  $pos         = 0;               // indentation level
  $strLen      = strlen($json);
  $indentStr   = "    ";
  $newLine     = "\n";
  $prevChar    = '';
  $outOfQuotes = true;

  for ($i = 0; $i < $strLen; $i++) {
    // Grab the next character in the string
    $char = substr($json, $i, 1);

    // Are we inside a quoted string?
    if ($char == '"' && $prevChar != '\\') {
      $outOfQuotes = !$outOfQuotes;
    }
    // If this character is the end of an element,
    // output a new line and indent the next line
    else if (($char == '}' || $char == ']') && $outOfQuotes) {
      $result .= $newLine;
      $pos--;
      for ($j = 0; $j < $pos; $j++) {
        $result .= $indentStr;
      }
    }
    // eat all non-essential whitespace in the input as we do our own here and it would only mess up our process
    else if ($outOfQuotes && false !== strpos(" \t\r\n", $char)) {
      continue;
    }

    // Add the character to the result string
    $result .= $char;
    // always add a space after a field colon:
    if ($char == ':' && $outOfQuotes) {
      $result .= ' ';
    }

    // If the last character was the beginning of an element,
    // output a new line and indent the next line
    if (($char == ',' || $char == '{' || $char == '[') && $outOfQuotes) {
      $result .= $newLine;
      if ($char == '{' || $char == '[') {
        $pos++;
      }
      for ($j = 0; $j < $pos; $j++) {
        $result .= $indentStr;
      }
    }
    $prevChar = $char;
  }

  return $result;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function views_geojson_ctools_plugin_api($module, $api) {
  $path = drupal_get_path('module', 'views_geojson') . '/includes';
  return array(
    'version' => 1,
    'path' => $path
  );
}

